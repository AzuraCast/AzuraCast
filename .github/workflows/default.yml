name: Build, Test and Publish
on:
  pull_request:
    branches:
      - main
  push:
    paths-ignore:
      - "*.md"
      - ".github/*.yml"
      - ".github/ISSUE_TEMPLATE/*.md"
      - "install.sh" # Ansible-only scripts and folders
      - "update.sh"
      - "util/ansible/**"
    branches:
      - ci-testing
      - main
      - stable
    tags:
      - "*"
#  schedule:
#    - cron: "0 2 * * 0" # Weekly on Sundays at 02:00

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    env:
      APPLICATION_ENV: testing
      NODE_ENV: production
    steps:
      - uses: actions/checkout@master

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: intl, xdebug
          tools: composer:v2, cs2pr

      - name: Cache PHP dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('composer.lock') }}

      - name: Run Composer install
        run: |
          composer install --no-interaction --ignore-platform-reqs

      - name: Run PHP Linter
        run: |
          vendor/bin/parallel-lint . --exclude vendor --checkstyle | cs2pr

      - name: Run PHPStan
        run: |
          vendor/bin/phpstan analyze --memory-limit=-1 --error-format=checkstyle | cs2pr

      - name: Run PHP Code Sniffer
        run: |
          vendor/bin/phpcs --report=checkstyle | cs2pr

  prepare:
    name: Prepare Codebase
    needs: test
    runs-on: ubuntu-latest
    env:
      APPLICATION_ENV: testing
      NODE_ENV: production
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@master

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: intl, xdebug
          tools: composer:v2, cs2pr

      - name: Cache PHP dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('composer.lock') }}

      - name: Set console permissions and clear static assets.
        run: |
          rm -rf web/static/dist
          rm -rf web/static/webpack_dist
          rm -rf web/static/webpack.json
          rm -rf web/static/assets.json
          rm -rf translations/*.UTF-8
          chmod a+x bin/console

      - name: Run Composer install
        run: |
          composer install --no-interaction --ignore-platform-reqs

      - name: Generate new translations from existing code.
        run: |
          cd frontend
          npm ci
          npm run generate-locales

          cd ..
          bin/console locale:generate

      # - name: Pull latest translations.
      #   uses: crowdin/github-action@1.5.3
      #   with:
      #     upload_sources: true
      #     download_translations: true
      #     export_only_approved: false
      #     push_translations: false
      #     crowdin_branch_name: main
      #     config: crowdin.yaml
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
      #     CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

      - name: Import locales, build static assets.
        run: |
          bin/console locale:import

          cd frontend
          npm run import-locales
          npm run build

      - name: Build OpenAPI Docs
        run: bin/console azuracast:api:docs

      - name: Write .gitinfo File
        run: |
          bash util/write_git_info.sh
          chmod 777 .gitinfo

      - name: Upload built static assets and translations
        uses: actions/upload-artifact@v2
        with:
          name: assets
          if-no-files-found: error
          path: |
            .gitinfo
            translations
            web/static/dist
            web/static/webpack_dist
            web/static/webpack.json
            web/static/assets.json
            web/static/api/openapi.yml

  build:
    name: Build & Publish
    needs: prepare
    permissions:
      contents: read
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@master

      - name: Download built static assets from previous step
        uses: actions/download-artifact@v2
        with:
          name: assets

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/boostmn/boostcast
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          # platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
