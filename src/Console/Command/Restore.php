<?php
namespace App\Console\Command;

use App\Entity;
use App\Utilities;
use Azura\Console\Command\CommandAbstract;
use Doctrine\ORM\EntityManager;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Process\Process;

class Restore extends CommandAbstract
{
    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this->setName('azuracast:restore')
            ->setDescription(
                'Restore a backup previously generated by AzuraCast.'
            )
            ->addArgument(
                'path',
                InputArgument::REQUIRED,
                'The absolute (or relative to /var/azuracast/backups) path of the backup to restore.'
            )
            ->addOption('restore', null, InputOption::VALUE_NONE, 'Unused.')
            ->addOption('release', null, InputOption::VALUE_NONE, 'Used for updating only to a tagged release.');
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input, $output);
        $io->title('AzuraCast Restore');
        $io->writeln('Please wait while the backup is restored...');

        $archive_path = $input->getArgument('path');
        if ('/' !== $archive_path[0]) {
            $archive_path = \App\Sync\Task\Backup::BASE_DIR.$archive_path;
        }

        if (!file_exists($archive_path)) {
            $io->getErrorStyle()->error(sprintf('Backup path %s not found!', $archive_path));
            return 1;
        }

        // Extract tar.gz archive
        $io->section('Extracting backup file...');

        $process = $this->passThruProcess($io, [
            'tar',
            'zxvf',
            $archive_path
        ],'/');

        if (!$process->isSuccessful()) {
            $io->getErrorStyle()->error('An error occurred with the archive extraction.');
            return 1;
        }

        $io->newLine();

        // Handle DB dump
        $io->section('Importing database...');

        $tmp_dir_mariadb = '/tmp/azuracast_backup_mariadb';
        $path_db_dump = $tmp_dir_mariadb.'/db.sql';

        if (!file_exists($path_db_dump)) {
            $io->getErrorStyle()->error('Database backup file not found!');
            return 1;
        }

        /** @var EntityManager $em */
        $em = $this->get(EntityManager::class);
        $conn = $em->getConnection();

        $process = $this->passThruProcess(
            $io,
            'mysql --host=$DB_HOST --user=$DB_USERNAME --password=$DB_PASSWORD $DB_DATABASE < $DB_DUMP',
            $tmp_dir_mariadb,
            [
                'DB_HOST'     => $conn->getHost(),
                'DB_DATABASE' => $conn->getDatabase(),
                'DB_USERNAME' => $conn->getUsername(),
                'DB_PASSWORD' => $conn->getPassword(),
                'DB_DUMP'     => $path_db_dump,
            ]
        );

        if (!$process->isSuccessful()) {
            $io->getErrorStyle()->error('An error occurred with MariaDB.');
            return 1;
        }

        Utilities::rmdirRecursive($tmp_dir_mariadb);
        $io->newLine();

        // Handle InfluxDB import
        $tmp_dir_influxdb = '/tmp/azuracast_backup_influxdb';

        if (!is_dir($tmp_dir_influxdb)) {
            $io->getErrorStyle()->error('InfluxDB backup file not found!');
            return 1;
        }

        /** @var \InfluxDB\Database $influxdb */
        $influxdb = $this->get(\InfluxDB\Database::class);
        $influxdb_client = $influxdb->getClient();

        $process = $this->passThruProcess($io, [
            'influxd',
            'restore',
            '-portable',
            '-host',
            $influxdb_client->getHost().':8088',
            $tmp_dir_influxdb,
        ], $tmp_dir_influxdb);

        if (!$process->isSuccessful()) {
            $io->getErrorStyle()->error('An error occurred with InfluxDB.');
            return 1;
        }

        Utilities::rmdirRecursive($tmp_dir_influxdb);
        $io->newLine();

        // Update from current version to latest.
        $io->section('Running standard updates...');

        $this->runCommand($output, 'azuracast:setup', ['--update' => true]);

        $io->success([
            'Restore complete!',
        ]);
        return 0;
    }

    protected function passThruProcess(SymfonyStyle $io, $cmd, $cwd = null, array $env = []): Process
    {
        if (is_array($cmd)) {
            $process = new Process($cmd, $cwd);
        } else {
            $process = Process::fromShellCommandline($cmd, $cwd);
        }

        $process->run(function($type, $data) use ($process, $io) {
            if ($process::ERR === $type) {
                $io->getErrorStyle()->write($data);
            } else {
                $io->write($data);
            }
        }, $env);

        return $process;
    }
}
