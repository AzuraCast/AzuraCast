var live_time, load_timeout, app_datatable, map;

function cb(start, end) {
    is_live = live_time.isSame(start, 'day');

    if (is_live) {
        $('#reportrange span').html(<?=$this->escapeJs(__('Live Listeners')) ?>);
    } else {
        $('#reportrange span').html(start.format('ll') + ' - ' + end.format('ll'));
    }

    updateListeners(start, end);
}

var updateListeners = function(start, end) {
    clearTimeout(load_timeout);

    var params = {};
    if (!is_live) {
        params.start = start.format('YYYY-MM-DD');
        params.end = end.format('YYYY-MM-DD');
    }

    $.getJSON('<?=$router->named('api:listeners:index', ['station' => $station->getId()]) ?>', params, function (data) {
        app_datatable.listeners = data;
        setMapPoints(data);

        $('#listener-count').text(data.length);

        if (is_live) {
            load_timeout = setTimeout(updateListeners, 15 * 1000);
        }
    });
};

function initMap()
{
    map = L.map('map').setView([40, 0], 1);

    L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/<?=$customization->getTheme() ?>_all/{z}/{x}/{y}.png', {
        attribution: 'Map tiles by Carto, under CC BY 3.0. Data by OpenStreetMap, under ODbL.'
    }).addTo(map);
}

var markers = new Array();

function setMapPoints(points) {
    for(i=0;i<markers.length;i++) {
        map.removeLayer(markers[i]);
    }
    markers = new Array();

    $.each(points, function(i, l) {
        if (l.location.status !== 'success')
            return null;

        var marker = new L.marker([l.location.lat, l.location.lon])
            .bindPopup('IP: '+l.ip+'<br>' +
                'Country: '+l.location.country+'<br>' +
                'Region: '+l.location.region+'<br>' +
                'City: '+l.location.city+'<br>' +
                'Time connected: '+l.connected_time+'<br>' +
                'User Agent: '+l.user_agent)
            .addTo(map);

        markers.push(marker);
    });
}

$(function() {
    live_time = moment();

    $('#reportrange').daterangepicker({
        startDate: live_time,
        endDate: live_time,
        opens: "left",
        showDropdowns: true,
        ranges: {
            <?=$this->escapeJs(__('Live Listeners')) ?>: [moment(0), moment(0)],
            <?=$this->escapeJs(__('Today')) ?>: [moment(), moment()],
            <?=$this->escapeJs(__('Yesterday')) ?>: [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            <?=$this->escapeJs(__('Last 7 Days')) ?>: [moment().subtract(6, 'days'), moment()],
            <?=$this->escapeJs(__('Last 30 Days')) ?>: [moment().subtract(29, 'days'), moment()],
            <?=$this->escapeJs(__('This Month')) ?>: [moment().startOf('month'), moment().endOf('month')],
            <?=$this->escapeJs(__('Last Month')) ?>: [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
    }, cb);

    app_datatable = new Vue({
        el: '#app-datatable',
        data: {
            listeners: []
        }
    });

    initMap();

    cb(live_time, live_time);
});
